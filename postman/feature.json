{
	"info": {
		"_postman_id": "50d0dbce-0cdf-4045-ad11-3415dd44fe58",
		"name": "\"Explore with me\" API comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40792709"
	},
	"item": [
		{
			"name": "Создание комметария",
			"item": [
				{
					"name": "Создание комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed TypeError by checking for existence of user and event properties\r",
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const userId = target.user ? target.user.id : null;\r",
									"const eventId = target.event ? target.event.id : null;\r",
									"const message = target.message;\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, user, event, message, created\", function () {\r",
									"    \r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"    pm.expect(target).to.have.property('message');\r",
									"    pm.expect(target).to.have.property('created');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(userId).equal(pm.collectionVariables.get(\"uid\"), 'Идентификатор пользователя должен соответствовать значению переменной uid');\r",
									"    pm.expect(eventId).equal(pm.collectionVariables.get(\"eid\"), 'Идентификатор события должно соответствовать значению переданного в значении eid');\r",
									"    pm.expect(message).equal(pm.collectionVariables.get(\"message\"), 'Идентификатор события должно соответствовать значению переданного в значении message');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"{{message}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/comments/{{uid}}/{{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"comments",
								"{{uid}}",
								"{{eid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария несуществующий пользователь",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        pm.collectionVariables.set(\"uid\", 999999)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed TypeError by checking for existence of user and event properties\r",
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"{{message}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/comments/{{uid}}/{{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"comments",
								"{{uid}}",
								"{{eid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария несуществующее событие",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        pm.collectionVariables.set(\"eid\", 99999)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed TypeError by checking for existence of user and event properties\r",
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"{{message}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/comments/{{uid}}/{{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"comments",
								"{{uid}}",
								"{{eid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария с пустым телом",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        pm.collectionVariables.set(\"eid\", 99999)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed TypeError by checking for existence of user and event properties\r",
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/comments/{{uid}}/{{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"comments",
								"{{uid}}",
								"{{eid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария с пустым сообщением",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        pm.collectionVariables.set(\"eid\", 99999)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed TypeError by checking for existence of user and event properties\r",
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/comments/{{uid}}/{{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"comments",
								"{{uid}}",
								"{{eid}}"
							]
						}
					},
					"response": []
				}
			]
		},
      {
        "name": "Изменение комментария",
        "item": [
          {
            "name": "Изменение комментария",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "exec": [
                    "const main = async () => {",
                    "    const api = new API(pm);",
                    "    const rnd = new RandomUtils();",
                    "",
                    "    try {",
                    "        const user = await api.addUser(rnd.getUser());",
                    "        pm.collectionVariables.set(\"uid\", user.id);",
                    "        const category = await api.addCategory(rnd.getCategory());",
                    "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                    "        await api.publishEvent(event.id);",
                    "        pm.collectionVariables.set(\"eid\", event.id);",
                    "        const newComment = rnd.getComment();",
                    "        pm.collectionVariables.set(\"updatedMessage\", newComment.message);",
                    "        const comment = await api.addComment(user.id, event.id, newComment);",
                    "        pm.collectionVariables.set(\"comment\", comment.id);",
                    "    } catch(err) {",
                    "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                    "    }",
                    "};",
                    "",
                    "const interval = setInterval(() => {}, 1000);",
                    "",
                    "setTimeout(async () => {",
                    "    try {",
                    "        await main();",
                    "    } catch (e) {",
                    "        console.error(e);",
                    "    } finally {",
                    "        clearInterval(interval);",
                    "    }",
                    "}, 100);"
                  ],
                  "type": "text/javascript"
                }
              },
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                    "    pm.response.to.have.status(200);",
                    "    pm.response.to.be.withBody;",
                    "    pm.response.to.be.json;",
                    "});",
                    "",
                    "const target = pm.response.json();",
                    "const userId = target.user ? target.user.id : null;",
                    "const message = target.message;",
                    "",
                    "pm.test(\"Комментарий должен содержать поля: id, user, event, message, created\", function () {",
                    "    pm.expect(target).to.have.property('id');",
                    "    pm.expect(target).to.have.property('user');",
                    "    pm.expect(target).to.have.property('event');",
                    "    pm.expect(target).to.have.property('message');",
                    "    pm.expect(target).to.have.property('created');",
                    "});",
                    "",
                    "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
                    "    pm.expect(target.id).to.not.be.null;",
                    "    pm.expect(userId).to.equal(pm.collectionVariables.get(\"uid\"), 'Идентификатор пользователя должен соответствовать значению переменной uid');",
                    "    pm.expect(message).to.equal(pm.collectionVariables.get(\"updatedMessage\"), 'Текст сообщения должен соответствовать значению переданного в значении message');",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ],
            "request": {
              "method": "PATCH",
              "header": [],
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"message\": \"{{updatedMessage}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "url": {
                "raw": "{{baseUrl}}/users/comments/{{uid}}/{{comment}}",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "users",
                  "comments",
                  "{{uid}}",
                  "{{comment}}"
                ]
              }
            },
            "response": []
          },
          {
            "name": "Изменение комментария с неверным пользователем",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "exec": [
                    "const main = async () => {",
                    "    const api = new API(pm);",
                    "    const rnd = new RandomUtils();",
                    "",
                    "    try {",
                    "        const user = await api.addUser(rnd.getUser());",
                    "        const userNew = await api.addUser(rnd.getUser());",
                    "        pm.collectionVariables.set(\"uid\", userNew.id);",
                    "        const category = await api.addCategory(rnd.getCategory());",
                    "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                    "        pm.collectionVariables.set(\"eid\", event.id);",
                    "        const newComment = rnd.getComment();",
                    "        pm.collectionVariables.set(\"updatedMessage\", newComment.message);",
                    "        const comment = await api.addComment(user.id, event.id, newComment);",
                    "        pm.collectionVariables.set(\"comment\", comment.id);",
                    "    } catch(err) {",
                    "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                    "    }",
                    "};",
                    "",
                    "const interval = setInterval(() => {}, 1000);",
                    "",
                    "setTimeout(async () => {",
                    "    try {",
                    "        await main();",
                    "    } catch (e) {",
                    "        console.error(e);",
                    "    } finally {",
                    "        clearInterval(interval);",
                    "    }",
                    "}, 100);"
                  ],
                  "type": "text/javascript"
                }
              },
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {",
                    "    pm.response.to.have.status(403);",
                    "    pm.response.to.be.withBody;",
                    "    pm.response.to.be.json;",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ],
            "request": {
              "method": "PATCH",
              "header": [],
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"message\": \"{{updatedMessage}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "url": {
                "raw": "{{baseUrl}}/users/comments/{{uid}}/{{comment}}",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "users",
                  "comments",
                  "{{uid}}",
                  "{{comment}}"
                ]
              }
            },
            "response": []
          },
          {
            "name": "Изменение комментария с несуществующим пользователем",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "exec": [
                    "const main = async () => {",
                    "    const api = new API(pm);",
                    "    const rnd = new RandomUtils();",
                    "",
                    "    try {",
                    "        const user = await api.addUser(rnd.getUser());",
                    "        const category = await api.addCategory(rnd.getCategory());",
                    "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                    "        pm.collectionVariables.set(\"eid\", event.id);",
                    "        const newComment = rnd.getComment();",
                    "        pm.collectionVariables.set(\"updatedMessage\", newComment.message);",
                    "        const comment = await api.addComment(user.id, event.id, newComment);",
                    "        pm.collectionVariables.set(\"comment\", comment.id);",
                    "        pm.collectionVariables.set(\"uid\", 999999);",
                    "    } catch(err) {",
                    "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                    "    }",
                    "};",
                    "",
                    "const interval = setInterval(() => {}, 1000);",
                    "",
                    "setTimeout(async () => {",
                    "    try {",
                    "        await main();",
                    "    } catch (e) {",
                    "        console.error(e);",
                    "    } finally {",
                    "        clearInterval(interval);",
                    "    }",
                    "}, 100);"
                  ],
                  "type": "text/javascript"
                }
              },
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
                    "    pm.response.to.have.status(404);",
                    "    pm.response.to.be.withBody;",
                    "    pm.response.to.be.json;",
                    "});",
                    "",
                    "const response = pm.response.json();",
                    "",
					  "pm.test(\"Сообщение об ошибке должно указывать на отсутствие пользователя\", function () {",
					  "    pm.expect(response).to.have.property('status', '404 NOT_FOUND');",
					  "    pm.expect(response).to.have.property('reason', 'Запрошенный объект не найден.');",
					  "    pm.expect(response.message).to.include('Пользователь с id');",
					  "    pm.expect(response.message).to.include('не найден');",
					  "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ],
            "request": {
              "method": "PATCH",
              "header": [],
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"message\": \"{{updatedMessage}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "url": {
                "raw": "{{baseUrl}}/users/comments/{{uid}}/{{comment}}",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "users",
                  "comments",
                  "{{uid}}",
                  "{{comment}}"
                ]
              }
            },
            "response": []
          },
          {
            "name": "Изменение комментария без сообщения",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "exec": [
                    "const main = async () => {",
                    "    const api = new API(pm);",
                    "    const rnd = new RandomUtils();",
                    "",
                    "    try {",
                    "        const user = await api.addUser(rnd.getUser());",
                    "        pm.collectionVariables.set(\"uid\", user.id);",
                    "        const category = await api.addCategory(rnd.getCategory());",
                    "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                    "        pm.collectionVariables.set(\"eid\", event.id);",
                    "        const newComment = rnd.getComment();",
                    "        pm.collectionVariables.set(\"updatedMessage\", newComment.message);",
                    "        const comment = await api.addComment(user.id, event.id, newComment);",
                    "        pm.collectionVariables.set(\"comment\", comment.id);",
                    "    } catch(err) {",
                    "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                    "    }",
                    "};",
                    "",
                    "const interval = setInterval(() => {}, 1000);",
                    "",
                    "setTimeout(async () => {",
                    "    try {",
                    "        await main();",
                    "    } catch (e) {",
                    "        console.error(e);",
                    "    } finally {",
                    "        clearInterval(interval);",
                    "    }",
                    "}, 100);"
                  ],
                  "type": "text/javascript"
                }
              },
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
                    "    pm.response.to.have.status(400);",
                    "    pm.response.to.be.withBody;",
                    "    pm.response.to.be.json;",
                    "});",
                    "",
                    "const response = pm.response.json();",
                    "",
					  "pm.test(\"Сообщение об ошибке должно указывать на отсутствие обязательного поля\", function () {",
					  "    pm.expect(response).to.have.property('status', '400 BAD_REQUEST');",
					  "    pm.expect(response).to.have.property('reason', 'Некорректный запрос.');",
					  "    pm.expect(response.message).to.include('Некорректное значение параметра message');",
					  "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ],
            "request": {
              "method": "PATCH",
              "header": [],
              "body": {
                "mode": "raw",
                "raw": "{}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "url": {
                "raw": "{{baseUrl}}/users/comments/{{uid}}/{{comment}}",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "users",
                  "comments",
                  "{{uid}}",
                  "{{comment}}"
                ]
              }
            },
            "response": []
          },
			{
				"name": "Изменение комментария без указания id",
				"event": [
					{
						"listen": "prerequest",
						"script": {
							"exec": [
								"const main = async () => {",
								"    const api = new API(pm);",
								"    const rnd = new RandomUtils();",
								"",
								"    try {",
								"        const user = await api.addUser(rnd.getUser());",
								"        pm.collectionVariables.set(\"uid\", user.id);",
								"        const category = await api.addCategory(rnd.getCategory());",
								"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
								"        pm.collectionVariables.set(\"eid\", event.id);",
								"        const newComment = rnd.getComment();",
								"        pm.collectionVariables.set(\"updatedMessage\", newComment.message);",
								"        const comment = await api.addComment(user.id, event.id, newComment);",
								"        pm.collectionVariables.set(\"comment\", comment.id);",
								"    } catch(err) {",
								"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
								"    }",
								"};",
								"",
								"const interval = setInterval(() => {}, 1000);",
								"",
								"setTimeout(async () => {",
								"    try {",
								"        await main();",
								"    } catch (e) {",
								"        console.error(e);",
								"    } finally {",
								"        clearInterval(interval);",
								"    }",
								"}, 100);"
							],
							"type": "text/javascript"
						}
					},
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 500 и данные в формате json\", function () {",
								"    pm.response.to.have.status(500);",
								"    pm.response.to.be.withBody;",
								"    pm.response.to.be.json;",
								"});",
								"",
								"const response = pm.response.json();",
								"",
								"pm.test(\"Сообщение об ошибке должно указывать на внутреннюю ошибку сервера\", function () {",
								"    pm.expect(response).to.have.property('status', '500 INTERNAL_SERVER_ERROR');",
								"    pm.expect(response).to.have.property('reason', 'Внутренняя ошибка сервера.');",
								"    pm.expect(response.message).to.include('Request method');",
								"    pm.expect(response.message).to.include('is not supported');",
								"});"
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "PATCH",
					"header": [],
					"body": {
						"mode": "raw",
						"raw": "{\r\n    \"message\": \"{{updatedMessage}}\"\r\n}",
						"options": {
							"raw": {
								"language": "json"
							}
						}
					},
					"url": {
						"raw": "{{baseUrl}}/users/comments/{{uid}}",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							"comments",
							"{{uid}}"
						]
					}
				},
				"response": []
			}
        ]
      },
		{
			"name": "Удаление комментария",
			"item": [
				{
					"name": "Удаление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"comment_id\", comment.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"let source = pm.collectionVariables.get('response');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/comments/{{uid}}/{{comment_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"comments",
								"{{uid}}",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария админом",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"comment_id\", comment.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"let source = pm.collectionVariables.get('response');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/{{comment_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление несуществующего комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"comment_id\", comment.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let source = pm.collectionVariables.get('response');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/comments/{{uid}}/9999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"comments",
								"{{uid}}",
								"9999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария неверным пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user1.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"comment_id\", comment.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Сообщение об ошибке должно указывать на отсутствие прав\", function () {",
									"    pm.expect(response).to.have.property('status', '403 FORBIDDEN');",
									"    pm.expect(response).to.have.property('reason', 'Недостаточно прав для выполнения операции.');",
									"    pm.expect(response.message).to.include('Пользователь с id');",
									"    pm.expect(response.message).to.include('не имеет прав на удаление этого комментария');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/comments/{{uid}}/{{comment_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"comments",
								"{{uid}}",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Получения комментариев",
			"item": [
				{
					"name": "Получение всех комментариев пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/comments/{{uid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"comments",
								"{{uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев пользователя с пагинацией",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each comment has required fields\", function() {\r",
									"    const comments = pm.response.json();\r",
									"    \r",
									"    comments.forEach(comment => {\r",
									"        pm.expect(comment).to.have.all.keys(\r",
									"            'id', 'user', 'event', 'message', 'created'\r",
									"        );\r",
									"        \r",
									"        pm.expect(comment.user).to.have.all.keys('id', 'email', 'name');\r",
									"        \r",
									"        pm.expect(comment.event).to.have.all.keys(\r",
									"            'id', 'annotation', 'category', 'description', 'eventDate',\r",
									"            'location', 'paid', 'participantLimit', 'requestModeration',\r",
									"            'title', 'createdOn', 'initiator', 'confirmedRequests',\r",
									"            'publishedOn', 'state', 'views', 'adminStateAction', 'userStateAction'\r",
									"        );\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/comments/{{uid}}?from=0&size=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"comments",
								"{{uid}}"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев пользователя за период",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/comments/{{uid}}?rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2023-01-06%2013%3A30%3A38",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"comments",
								"{{uid}}"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2022-01-06%2013%3A30%3A38"
								},
								{
									"key": "rangeEnd",
									"value": "2023-01-06%2013%3A30%3A38"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев пользователя за период даты перепутаны",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/comments/{{uid}}?rangeStart=2024-01-06%2013%3A30%3A38&rangeEnd=2023-01-06%2013%3A30%3A38",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"comments",
								"{{uid}}"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2024-01-06%2013%3A30%3A38"
								},
								{
									"key": "rangeEnd",
									"value": "2023-01-06%2013%3A30%3A38"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/{{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{eid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев события с пагинацией",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each comment has required fields\", function() {\r",
									"    const comments = pm.response.json();\r",
									"    \r",
									"    comments.forEach(comment => {\r",
									"        pm.expect(comment).to.have.all.keys(\r",
									"            'id', 'user', 'event', 'message', 'created'\r",
									"        );\r",
									"        \r",
									"        pm.expect(comment.user).to.have.all.keys('id', 'email', 'name');\r",
									"        \r",
									"        pm.expect(comment.event).to.have.all.keys(\r",
									"            'id', 'annotation', 'category', 'description', 'eventDate',\r",
									"            'location', 'paid', 'participantLimit', 'requestModeration',\r",
									"            'title', 'createdOn', 'initiator', 'confirmedRequests',\r",
									"            'publishedOn', 'state', 'views', 'adminStateAction', 'userStateAction'\r",
									"        );\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/{{eid}}?from=0&size=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{eid}}"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев события за период",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/{{eid}}?rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2023-01-06%2013%3A30%3A38",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{eid}}"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2022-01-06%2013%3A30%3A38"
								},
								{
									"key": "rangeEnd",
									"value": "2023-01-06%2013%3A30%3A38"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев события за период даты перепутаны",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        await api.addComment(user.id, event.id, rnd.getComment());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/{{eid}}?rangeStart=2024-01-06%2013%3A30%3A38&rangeEnd=2023-01-06%2013%3A30%3A38",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{eid}}"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2024-01-06%2013%3A30%3A38"
								},
								{
									"key": "rangeEnd",
									"value": "2023-01-06%2013%3A30%3A38"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев админом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев админом с пагинацией",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each comment has required fields\", function() {\r",
									"    const comments = pm.response.json();\r",
									"    \r",
									"    comments.forEach(comment => {\r",
									"        pm.expect(comment).to.have.all.keys(\r",
									"            'id', 'user', 'event', 'message', 'created'\r",
									"        );\r",
									"        \r",
									"        pm.expect(comment.user).to.have.all.keys('id', 'email', 'name');\r",
									"        \r",
									"        pm.expect(comment.event).to.have.all.keys(\r",
									"            'id', 'annotation', 'category', 'description', 'eventDate',\r",
									"            'location', 'paid', 'participantLimit', 'requestModeration',\r",
									"            'title', 'createdOn', 'initiator', 'confirmedRequests',\r",
									"            'publishedOn', 'state', 'views', 'adminStateAction', 'userStateAction'\r",
									"        );\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?from=0&size=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев админом за период",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2023-01-06%2013%3A30%3A38",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2022-01-06%2013%3A30%3A38"
								},
								{
									"key": "rangeEnd",
									"value": "2023-01-06%2013%3A30%3A38"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев админом за период даты перепутаны",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?rangeStart=2024-01-06%2013%3A30%3A38&rangeEnd=2023-01-06%2013%3A30%3A38",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2024-01-06%2013%3A30%3A38"
								},
								{
									"key": "rangeEnd",
									"value": "2023-01-06%2013%3A30%3A38"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addComment(userId, eventId, comment, verbose=null) {\r",
					"        return this.post(\"/users/comments/\" + userId + \"/\"+eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getComment(commentId) {\r",
					"        return {\r",
					"            message: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50)\r",
					"        }\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "eid",
			"value": ""
		},
		{
			"key": "message",
			"value": "Тестовый комментарий",
			"type": "string"
		},
		{
			"key": "updatedMessage",
			"value": "Animi earum accusantium sequi nulla ut harum delen",
			"type": "string"
		},
		{
			"value": ""
		},
		{
			"key": "comment",
			"value": ""
		},
		{
			"key": "comment_id",
			"value": ""
		},
		{
			"key": "rangeStart",
			"value": "",
			"type": "string"
		},
		{
			"key": "rangeEnd",
			"value": "",
			"type": "string"
		}
	]
}